#include<cstdio>
#include<cctype>
#include<cstring>
#include<cmath>
#include<cstdlib>
#include<climits>
#include<cassert>
#include<iostream>
#include<sstream>
#include<algorithm>
#include<functional>
#include<numeric>
#include<utility>
#include<vector>
#include<string>
#include<bitset>
#include<list>
#include<deque>
#include<stack>
#include<queue>
#include<set>
#include<map>

#define inf 1<<30
#define pi acos(-1.0)
#define in(a) scanf("%lld",&a)
#define FOR(a,b,c) for(a=b;a<=c;a++)
#define ROF(a,b,c) for(a=c;a>=1;a--)
#define For(a,b,c) for(a=b;a<c;a++)
#define roF(a,b,c) for(a=c-1;a>=0;a--)
#define rep(i,a,b,c) for(i=a;i<=b;i+=c)
#define mm(arr,x) memset(arr,x,sizeof(arr))
#define pf printf
#define fin freopen("in.txt","r",stdin)
#define fout freopen("out.txt","w",stdout)
#define pb push_back
#define sq(x) ((x)*(x))
#define Sqrt(n) (long long)round(sqrt((double)n))
#define logg(x,y) (double)log(y)/(double)log(x)
#define cl clear()
#define ps push
#define mod 1000000007
#define mid (lo+hi)/2
#define LEFT node*2
#define RIGHT (node*2)+1

using namespace std;
typedef /*long long*/ int ll;
typedef string S;
typedef double D;

ll n,m,t,dp[115][256][256],bit[118],a,b,c;

ll chek(ll pos,ll mask)
{
    if(pos<0 || pos>=m)
        return 1;
    if((mask & 1<<pos)==0)
        return 0;
    return 1;
}

ll sett(ll pos,ll mask)
{
    if(pos>=m || pos<0)
        return mask;
    return mask | (1<<pos);
}


ll process1(ll pos,ll curr,ll next,ll nextt)
{
    a=curr;
    b=next;
    c=nextt;
    if(chek(pos,curr)==0 && chek(pos+1,curr)==0 && chek(pos+2,curr)==0 && chek(pos,next)==0 && chek(pos+1,next)==0 && chek(pos+2,next)==0)
    {
        a=sett(pos,a);
        a=sett(pos+1,a);
        a=sett(pos+2,a);

        b=sett(pos,b);
        b=sett(pos+1,b);
        b=sett(pos+2,b);
        return 1;
    }
    return 0;
}

ll process2(ll pos,ll curr,ll next,ll nextt)
{ ///********************************************** I am making the A as curr B as next C as Nextt  coz i can return changed mask of curr,next,nextt so i declared globally
    a=curr;
    b=next;
    c=nextt;
    if(chek(pos,curr)==0 && chek(pos+1,curr)==0 && chek(pos,next)==0 && chek(pos+1,next)==0 && chek(pos,nextt)==0 && chek(pos+1,nextt)==0)
    {
        a=sett(pos,a);
        a=sett(pos+1,a);

        b=sett(pos,b);
        b=sett(pos+1,b);

        c=sett(pos,c);
        c=sett(pos+1,c);
        return 1;
    }
    return 0;
}


ll call(ll pos,ll curr,ll next,ll nextt);

ll call2(ll pos,ll clm,ll curr,ll next,ll nextt)
{
    if(clm>=m)
        return call(pos+1,next,nextt,bit[pos+3]);
    ll p=0;
    if(process1(clm,curr,next,nextt)==1)    ///*********** if the 1st Tile is fit in this rigion
        p=max(p,call2(pos,clm+1,a,b,c)+1);

    if(process2(clm,curr,next,nextt)==1)   ///************* Like The 1st Tile
        p=max(p,call2(pos,clm+1,a,b,c)+1);

    p=max(p,call2(pos,clm+1,curr,next,nextt));  ///********* I can skip this place for making maximum if possible
    return p;
}


ll call(ll pos,ll curr,ll next,ll nextt)
{
    if(pos>=n)
        return 0;
    if(dp[pos][curr][next]!=-1)
        return dp[pos][curr][next];
    return dp[pos][curr][next]=call2(pos,0,curr,next,nextt);
}

int main()
{
    ll test,i,j,sum,p;
    char arr[105][105];
    cin>>test;
    for(t=1;t<=test;t++)
    {
        cin>>n>>m;

        for(i=0;i<n;i++)
            for(j=0;j<m;j++)
                cin>>arr[i][j];

        if(m>8)   ///***********************************************  I have Just Flipped the Given Grid when column number is ore than 8 Coz i will do it using Bitmask DP
        {
            for(i=0;i<n;i++)
            {
                for(j=0;j<m;j++)
                    swap(arr[i][j],arr[j][i]);
            }
            swap(m,n);
        }


        for(i=0;i<n;i++)
        {
            sum=0;
            for(j=0;j<m;j++)
            {
                sum=sum<<1;
                if(arr[i][j]=='#')
                    sum=sum|1;
            }
            bit[i]=sum;
        }
        bit[n]=bit[n+1]=bit[n+2]=255;
        //pf("M = %lld N = %lld\n",m,n);
        mm(dp,-1);
        p=call(0,bit[0],bit[1],bit[2]);
        pf("Case %d: %d\n",t,p);
    }
    return 0;
}


///****************  My Input and Accepted Output


/*
4
7 100
....................................................................................................
...#......#..............#.............#...........................#................................
.................................................#............................#.....................
....#...#.............#......#................................#....#................................
..........#............................#..................................#.........................
...#...................#......................#.....................................................
..........#.........#........#.....................................#................................

100 8
........
........
........
.#......
........
..#.....
........
........
...#....
........
....#...
........
........
........
........
........
.#......
........
....#...
........
..#.....
........
.....#..
........
...#....
........
........
..#.....
........
....#...
........
..#.....
........
.....#..
........
....#...
......#.
........
..#.....
........
........
........
........
........
...#....
........
........
..#.....
........
........
........
.#......
........
........
........
........
....#...
........
........
........
........
...#....
........
........
........
........
..#.....
........
........
........
.....#..
........
........
....#...
........
........
........
........
........
........
........
........
........
........
...#....
........
........
........
........
...#....
........
...#....
........
........
...#....
........
........
........
........
........

8 2
..
..
..
..
..
..
..
..

4 4
#..#
....
#..#
....


Accepted output
Case 1: 106
Case 2: 123
Case 3: 2
Case 4: 1



*/
